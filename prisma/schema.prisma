generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model content {
  id              Int          @id @unique(map: "id_UNIQUE") @default(autoincrement())
  title           String       @db.VarChar(128)
  description     String       @db.Text
  file            String?      @db.VarChar(256)
  file_aux        String?      @db.VarChar(256)
  image           String?      @db.VarChar(256)
  response_type   String?      @db.VarChar(48)
  weight          Decimal?     @db.Decimal(15, 2)
  start_date      DateTime?    @db.Timestamp(0)
  end_date        DateTime?    @db.Timestamp(0)
  ocult           Boolean?     @default(false)
  evaluation      Boolean?
  order           Int?
  content_type_id Int
  lesson_id       Int
  content_type    content_type @relation(fields: [content_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_content_content_type1")
  lesson          lesson       @relation(fields: [lesson_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_content_class1")

  @@index([content_type_id], map: "fk_content_content_type1_idx")
  @@index([lesson_id], map: "fk_content_lesson1_idx")
}

model content_type {
  id      Int       @id @unique(map: "id_UNIQUE") @default(autoincrement())
  name    String    @db.VarChar(64)
  content content[]
}

model course {
  id             Int         @id @unique(map: "id_UNIQUE") @default(autoincrement())
  name           String      @db.VarChar(64)
  institution_id Int
  institution    institution @relation(fields: [institution_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_course_institution1")
  user           user[]

  @@index([institution_id], map: "fk_course_institution1_idx")
}

model discipline {
  id                  Int                   @id @unique(map: "int_UNIQUE") @default(autoincrement())
  code                Int                   @unique(map: "codigodisciplina_UNIQUE")
  title               String                @db.VarChar(104)
  substituition       Boolean?
  image               String?               @db.Text
  start_date          DateTime              @db.Timestamp(0)
  end_date            DateTime              @db.Timestamp(0)
  closed_notes        Boolean?              @default(false)
  closed_date         DateTime?             @db.Timestamp(0)
  closed_user         Int?
  notes_state         String?               @default("Notas abertas para edição") @db.VarChar(45)
  institution_id      Int
  period_id           Int
  level_education_id  Int
  institution         institution           @relation(fields: [institution_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_discipline_institution1")
  level_education     level_education       @relation(fields: [level_education_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_discipline_level_education1")
  period              period                @relation(fields: [period_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_discipline_period1")
  discipline_has_user discipline_has_user[]
  lesson              lesson[]
  notification        notification[]

  @@index([institution_id], map: "fk_discipline_institution1_idx")
  @@index([level_education_id], map: "fk_discipline_level_education1_idx")
  @@index([period_id], map: "fk_discipline_period1_idx")
}

model discipline_has_user {
  int            Int         @id @unique(map: "int_UNIQUE") @default(autoincrement())
  active         Boolean     @default(true)
  user_id        Int
  discipline_int Int
  group_id       Int
  institution_id Int
  discipline     discipline  @relation(fields: [discipline_int], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_discipline_has_user_discipline1")
  group          group       @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_discipline_has_user_group1")
  institution    institution @relation(fields: [institution_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_discipline_has_user_institution1")
  user           user        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_discipline_has_user_user1")

  @@index([discipline_int], map: "fk_discipline_has_user_discipline1_idx")
  @@index([group_id], map: "fk_discipline_has_user_group1_idx")
  @@index([institution_id], map: "fk_discipline_has_user_institution1_idx")
  @@index([user_id], map: "fk_discipline_has_user_user1_idx")
}

model group {
  id                   Int                    @id @unique(map: "id_UNIQUE") @default(autoincrement())
  name                 String                 @db.VarChar(128)
  description          String                 @db.VarChar(256)
  institution_id       Int
  discipline_has_user  discipline_has_user[]
  institution          institution            @relation(fields: [institution_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_group_institution1")
  group_has_permission group_has_permission[]
  user                 user[]

  @@index([institution_id], map: "fk_group_institution1_idx")
}

model group_has_permission {
  id             Int         @unique(map: "id_UNIQUE") @default(autoincrement())
  group_id       Int
  permission_id  Int
  institution_id Int
  group          group       @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_group_has_permission_group1")
  institution    institution @relation(fields: [institution_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_group_has_permission_institution1")
  permission     permission  @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_group_has_permission_permission1")

  @@id([id, group_id, permission_id])
  @@index([group_id], map: "fk_group_has_permission_group1_idx")
  @@index([institution_id], map: "fk_group_has_permission_institution1_idx")
  @@index([permission_id], map: "fk_group_has_permission_permission1_idx")
}

model institution {
  id                   Int                    @id @unique(map: "id_UNIQUE") @default(autoincrement())
  name                 String                 @db.VarChar(128)
  description          String                 @db.VarChar(256)
  cnpj                 String                 @unique(map: "cnpj_UNIQUE") @db.VarChar(24)
  course               course[]
  discipline           discipline[]
  discipline_has_user  discipline_has_user[]
  group                group[]
  group_has_permission group_has_permission[]
  level_education      level_education[]
  modality             modality[]
  period               period[]
  pole                 pole[]
  user                 user[]
}

model lesson {
  id            Int        @id @unique(map: "id_UNIQUE") @default(autoincrement())
  title         String     @db.VarChar(128)
  image         String?    @db.VarChar(256)
  description   String     @db.Text
  hidden        Boolean?   @default(false)
  order         Int
  discipline_id Int
  content       content[]
  discipline    discipline @relation(fields: [discipline_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_class_discipline1")

  @@index([discipline_id], map: "fk_class_discipline1_idx")
}

model level_education {
  id             Int          @id @unique(map: "id_UNIQUE") @default(autoincrement())
  name           String       @db.VarChar(64)
  institution_id Int
  discipline     discipline[]
  institution    institution  @relation(fields: [institution_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pole_institution10")

  @@index([institution_id], map: "fk_pole_institution1_idx")
}

model modality {
  id             Int         @id @unique(map: "id_UNIQUE") @default(autoincrement())
  name           String      @db.VarChar(64)
  institution_id Int
  institution    institution @relation(fields: [institution_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_modality_institution1")
  user           user[]

  @@index([institution_id], map: "fk_modality_institution1_idx")
}

model notification {
  id                    Int                     @id @unique(map: "id_UNIQUE") @default(autoincrement())
  title                 String                  @db.VarChar(128)
  description           String                  @db.VarChar(256)
  date                  DateTime                @db.Timestamp(0)
  discipline_id         Int?
  discipline            discipline?             @relation(fields: [discipline_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_notification_discipline1")
  user_has_notification user_has_notification[]

  @@index([discipline_id], map: "fk_notification_discipline1_idx")
}

model period {
  id             Int          @id @unique(map: "id_UNIQUE") @default(autoincrement())
  name           String       @db.VarChar(64)
  institution_id Int
  discipline     discipline[]
  institution    institution  @relation(fields: [institution_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pole_institution100")

  @@index([institution_id], map: "fk_pole_institution1_idx")
}

model permission {
  id                   Int                    @id @unique(map: "id_UNIQUE") @default(autoincrement())
  name                 String                 @db.VarChar(128)
  description          String                 @db.VarChar(256)
  permission           String                 @db.VarChar(64)
  module               String                 @db.VarChar(64)
  group_has_permission group_has_permission[]
}

model pole {
  id             Int         @id @unique(map: "id_UNIQUE") @default(autoincrement())
  name           String      @db.VarChar(64)
  institution_id Int
  institution    institution @relation(fields: [institution_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pole_institution1")
  user           user[]

  @@index([institution_id], map: "fk_pole_institution1_idx")
}

model user {
  id                    Int                     @id @unique(map: "id_UNIQUE") @default(autoincrement())
  name                  String                  @db.VarChar(104)
  address               String?                 @db.Text
  email                 String                  @unique(map: "email_UNIQUE") @db.VarChar(104)
  password              String                  @db.VarChar(64)
  active                Int                     @default(1) @db.TinyInt
  identification        String?                 @db.VarChar(104)
  image                 String?                 @db.VarChar(256)
  phone                 String?                 @db.VarChar(48)
  last_login            DateTime?               @db.Timestamp(0)
  modality_id           Int?
  course_id             Int?
  pole_id               Int?
  institution_id        Int
  group_id              Int
  discipline_has_user   discipline_has_user[]
  course                course?                 @relation(fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_course1")
  group                 group                   @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_group1")
  institution           institution             @relation(fields: [institution_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_institution1")
  modality              modality?               @relation(fields: [modality_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_modality")
  pole                  pole?                   @relation(fields: [pole_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_pole1")
  user_has_notification user_has_notification[]
  user_token            user_token[]

  @@index([course_id], map: "fk_user_course1_idx")
  @@index([group_id], map: "fk_user_group1_idx")
  @@index([institution_id], map: "fk_user_institution1_idx")
  @@index([modality_id], map: "fk_user_modality_idx")
  @@index([pole_id], map: "fk_user_pole1_idx")
}

model user_has_notification {
  id              Int          @unique(map: "id_UNIQUE") @default(autoincrement())
  user_id         Int
  notification_id Int
  read            Boolean      @default(false)
  notification    notification @relation(fields: [notification_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_has_notification_notification1")
  user            user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_has_notification_user1")

  @@id([id, user_id, notification_id])
  @@index([notification_id], map: "fk_user_has_notification_notification1_idx")
  @@index([user_id], map: "fk_user_has_notification_user1_idx")
}

model user_token {
  id            Int       @id @unique(map: "id_UNIQUE") @default(autoincrement())
  refresh_token String    @db.LongText
  expires_date  DateTime  @db.Timestamp(0)
  created_at    DateTime? @default(now()) @db.Timestamp(0)
  user_id       Int
  user          user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_token_user1")

  @@index([user_id], map: "fk_user_token_user1_idx")
}
